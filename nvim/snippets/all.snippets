# Link
snippet link "link"
  \url{${1:url}${0}}
#
# Rprofile erstellen

snippet rprofile "Rprofile erstellen"
  # Arbeitsverzeichnis erstellen 

  setwd("/Users/g/Library/Mobile Documents/com~apple~CloudDocs/#Docs iCloud/R Statistik, icloud/R, projects/${1:name}")

  #======================= Pakete und functions Vorlage laden ============================

  library(lintr)
  #library(psych)
  library(ggpubr)
  library(gtsummary)
  library(gt)
  library(glue)
  pacman::p_load(pacman, GGally, ggthemes, ggvis, httr, lubridate, plotly, rmarkdown, shiny) 
    # rausgenommen stringr, tidyr, ggplot2 
  library(conflicted)
  library(skimr)
  library(labelled)
  library(tidyverse) # enthalten: ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats
  library(car)
  # library(bstfun)
  # library(httpgd)
  library(styler)
  library(htmlwidgets)
  # library(bookmarkr) # https://github.com/jmcphers/bookmarkr

  if (interactive()) {
    require(conflicted)
  }

  filter <- dplyr::filter

  dfilter <- function(...) droplevels(filter(...))
  filterd <- function(...) droplevels(filter(...))
  # nach: https://stackoverflow.com/questions/32059343/when-filtering-with-dplyr-in-r-why-do-filtered-out-levels-of-a-variable-remain

  tidy <- broom::tidy

  #========================== Theme f체r gt summary erstellen ============================

  ds_theme <-
    list(
      # round large pvalues to 2 places
      "pkgwide-fn:pvalue_fun" = function (x) gtsummary::style_pvalue(x, digits = 3),
      # some gt customization
      "as_gt-lst:addl_cmds"= list(
        # make the font size small
        tab_spanner = rlang::expr(gt::tab_options(table.font.size = 'small')),
        # stripe the table rows
        user_added1 = rlang::expr(gt::opt_row_striping()),
        user_added2 = rlang::expr(gt::opt_table_lines("none")),
        # add a custom data source note
        user_added3 = rlang::expr(gt::tab_source_note(
          source_note = paste("Tabelle erstellt am:", Sys.Date())))#,
      )
    )
  # add a custom title and subtitle to every table
  # user_added4 = rlang::expr(gt::tab_header(
  #   title = "10 II ECMO Analyse", subtitle = "For Internal Use Only"))

  #========================== Theme f체r gt Tabelle erstellen ============================

  # Funktion zum Anwenden des benutzerdefinierten Themes auf gt-Tabellen
  gt_theme <- function(table) {
    # Anpassungen an der Tabelle vornehmen
    table <- table %>%
      fmt_number(
        decimals = 3,
        drop_trailing_zeros = TRUE,
        drop_trailing_dec_mark = TRUE,
        use_seps = FALSE
      ) %>%
      tab_options(
        heading.title.font.size = "small",
        heading.subtitle.font.size = "small",
        table.font.size = "small"
      ) %>%
      opt_table_lines("none") %>% # Tabellenlinien entfernen
      tab_style(
        style = list(
          cell_text(weight = "bold")
        ),
        locations = list(
          cells_body(columns = 1),
          cells_column_labels()
        )
      )
    
    # Benutzerdefinierte Quellenangabe hinzuf체gen
    table <- tab_source_note(
      table,
      source_note = paste("Tabelle erstellt am:", Sys.Date())
    )
    
    return(table)
  }


  #========================== Datens채tze laden ============================
